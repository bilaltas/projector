#!/bin/bash


# Check if the project is already installed
if [[ $INSTALLED == "yes" ]]; then

	echo -e "${RED}Project is already installed.${RESET}"
	exit

fi




# Get data from sample.env file
source "$BUILDERDIR/sample.env"
PLUGINS=$DEFAULT_PLUGINS




# Get local.env in project folder, if exists
if [[ -f "$PROJECTDIR/local.env" ]]; then

	source "$PROJECTDIR/local.env"

fi




# Get .env in project folder, if exists
if [[ -f "$PROJECTDIR/.env" ]]; then

	source "$PROJECTDIR/.env"

fi




# Update the slug and theme folder name
SLUG=$PROJECTNAME
ACTIVE_THEME=$PROJECTNAME
STARTER=twentytwentyone




# ASK THE STARTER THEME
read -ep "Starter Theme (twentytwentyone | <any theme on WP.org>): " starter
if [[ $starter != $STARTER ]] && [[ ! -z "$starter" ]]; then

	printf "Checking '${starter}' theme availability ..."
	while ! url_check "https://wordpress.org/themes/$starter/"; do

		echo -e " ${RED}not available${RESET}"
		echo ""

		read -ep "Starter Theme (twentytwentyone | flexible-gs | <any theme on WP.org>): " starter
		printf "Checking '${starter}' theme availability ..."

	done
	echo -e " ${GREEN}available${RESET}"


	# Update the active theme name
	ACTIVE_THEME=$starter


fi
[[ ! -z "$starter" ]] && STARTER=$starter || echo "Using '${STARTER}'"




# ASK THE SITE INFO
read -ep "WordPress Version (${WP_VERSION}): " wp_version
if [[ $wp_version != "latest" ]] && [[ ! -z "$wp_version" ]]; then

	printf "Checking '${wp_version}' availability ..."
	while ! version_check $wp_version; do
		if ! version_check "$wp_version.0"; then

			echo -e " ${RED}not available${RESET}"
			echo ""


			read -ep "Write an available WordPress Version or just type 'latest': " wp_version
			printf "Checking '${wp_version}' availability ..."

		else

			wp_version="$wp_version.0"

		fi
	done
	echo -e " ${GREEN}available${RESET}"

fi
[[ ! -z "$wp_version" ]] && WP_VERSION=$wp_version || echo "Using '${WP_VERSION}'"



if [[ $STARTER == "flexible-gs" ]]; then

	read -ep "Function Prefixes (${PREFIX}): " prefix
	[[ ! -z "$prefix" ]] && PREFIX=$prefix || echo "Using '${PREFIX}'"

fi


read -ep "Local development domain Name (${DOMAIN}): " domain
[[ ! -z "$domain" ]] && DOMAIN=$domain || echo "Using '${DOMAIN}'"


# Check the local domain availability
echo "Checking '${DOMAIN}' availability in your local machine..."
if grep -q "${DOMAIN}" /etc/hosts; then
	echo -e "${RED}'${DOMAIN}' Host has already been added. Please remove it before installing.${RESET}"
	exit
fi
echo -e "${GREEN}${DOMAIN}${RESET} - AVAILABLE"


read -ep "Website Name (${NAME}): " name
[[ ! -z "$name" ]] && NAME=$name || echo "Using '${NAME}'"


read -ep "Website Tagline (${DESC}): " desc
[[ ! -z "$desc" ]] && DESC=$desc || echo "Using '${DESC}'"


read -ep "Plugins that need to be installed (Just press 'enter' to install all these recommended plugins: ${PLUGINS}): " plugins
[[ ! -z "$plugins" ]] && PLUGINS=$plugins || echo "Using '${PLUGINS}'"


# Ask for the admin info
read -ep "Admin Email (${ADMIN_EMAIL}): " admin_email
[[ ! -z "$admin_email" ]] && ADMIN_EMAIL=$admin_email || echo "Using '${ADMIN_EMAIL}'"


if [[ $ADMIN_EMAIL == bilaltas@me.com ]]; then


	ADMIN_USERNAME="BilalTas"
	ADMIN_NAME="Bilal"
	ADMIN_LAST_NAME="Tas"
	ADMIN_URL="https://www.bilaltas.net"


else


	read -ep "Admin Username (${ADMIN_USERNAME}): " admin_username
	[[ ! -z "$admin_username" ]] && ADMIN_USERNAME=$admin_username || echo "Using '${ADMIN_USERNAME}'"


	read -ep "Admin First Name (${ADMIN_NAME}): " admin_name
	[[ ! -z "$admin_name" ]] && ADMIN_NAME=$admin_name || echo "Using '${ADMIN_NAME}'"


	read -ep "Admin Last Name (${ADMIN_LAST_NAME}): " admin_last_name
	[[ ! -z "$admin_last_name" ]] && ADMIN_LAST_NAME=$admin_last_name || echo "Using '${ADMIN_LAST_NAME}'"


	read -ep "Admin Website URL (${ADMIN_URL}): " admin_url
	[[ ! -z "$admin_url" ]] && ADMIN_URL=$admin_url || echo "Using '${ADMIN_URL}'"


fi




# Confirm the information
echo ""
echo ""
echo "== Information Entered ============"
echo ""


	echo "Local Development Domain: $DOMAIN"
	echo "Starter/Initial Theme: $STARTER"
	echo "WordPress Version: $WP_VERSION"
	echo ""

	echo "Project Name: $SLUG"
	[[ $STARTER == "flexible-gs" ]] && echo "Function Prefixes: $PREFIX" || sleep 0
	echo ""

	echo "Website Name: $NAME"
	echo "Website Tagline: $DESC"
	[[ ! -z "$plugins" ]] && echo "Plugins: $plugins" || echo "Plugins: $PLUGINS"
	echo ""

	echo "Admin Email: $ADMIN_EMAIL"
	echo "Admin Username: $ADMIN_USERNAME"
	echo "Admin First Name: $ADMIN_NAME"
	echo "Admin Last Name: $ADMIN_LAST_NAME"
	echo "Admin URL: $ADMIN_URL"


echo ""
echo "==================================="
echo ""
echo ""
read -ep "Are these correct? (type 'yes' to confirm): " confirm


# If not confirmed, close the installation
if [[ $confirm != yes ]] && [[ $confirm != y ]]; then

	echo -e "${RED}Not confirmed.${RESET}"
	exit

fi




# Create the project folder
if [[ ! -d "$PROJECTDIR" ]]; then

	printf "Creating the project folder ($SLUG) ..."
	if sudo mkdir -p "$PROJECTDIR"; then

		echo -e " ${GREEN}done${RESET}"

	else

		echo -e " ${RED}error${RESET}"
		exit

	fi

fi




# Create the themes folder
if [[ ! -d "$PROJECTDIR/wp/wp-content/themes" ]]; then

	printf "Creating the 'themes' folder ..."
	if sudo mkdir -p "$PROJECTDIR/wp/wp-content/themes"; then

		echo -e " ${GREEN}done${RESET}"

	else

		echo -e " ${RED}error${RESET}"
		exit

	fi

fi




# Create the plugins folder
if [[ ! -d "$PROJECTDIR/wp/wp-content/plugins" ]]; then

	printf "Creating the 'plugins' folder ..."
	if sudo mkdir -p "$PROJECTDIR/wp/wp-content/plugins"; then

		echo -e " ${GREEN}done${RESET}"

	else

		echo -e " ${RED}error${RESET}"
		exit

	fi

fi




# Update environment files with the new info
update_environment


# Get data from the new .env file
source "$PROJECTDIR/.env"




if [[ $STARTER == "flexible-gs" ]]; then


	# Download the template
	rm -rf "$PROJECTDIR/wp/wp-content/themes/$SLUG"
	git clone https://github.com/bilaltas/wp-flexible-starter-template.git "$PROJECTDIR/wp/wp-content/themes/$SLUG"
	rm -rf "$PROJECTDIR/wp/wp-content/themes/$SLUG/.git"
	echo -e "Starter theme clonned ... ${GREEN}done${RESET}"


	# Check the theme files
	if [[ ! -f "$PROJECTDIR/wp/wp-content/themes/$SLUG/functions.php" ]] || [[ ! -f "$PROJECTDIR/wp/wp-content/themes/$SLUG/header.php" ]] || [[ ! -f "$PROJECTDIR/wp/wp-content/themes/$SLUG/footer.php" ]] || [[ ! -f "$PROJECTDIR/wp/wp-content/themes/$SLUG/style.scss" ]]; then

		echo -e "${RED}Missing theme files.${RESET}"
		exit

	fi




	# Theme function prefix changes
	file_search_replace "s/sitename/${PREFIX}/g" "$PROJECTDIR/wp/wp-content/themes/$SLUG/functions.php"
	file_search_replace "s/sitename/${PREFIX}/g" "$PROJECTDIR/wp/wp-content/themes/$SLUG/header.php"
	file_search_replace "s/sitename/${PREFIX}/g" "$PROJECTDIR/wp/wp-content/themes/$SLUG/footer.php"
	echo -e "Function prefixes changed as '${PREFIX}_' ... ${GREEN}done${RESET}"




	# Theme info changes
	file_search_replace "s/Site Name/${NAME}/g" "$PROJECTDIR/wp/wp-content/themes/$SLUG/style.scss"
	echo -e "Theme name updated as '${NAME}' ... ${GREEN}done${RESET}"

	file_search_replace "s/Site tagline/${DESC}/g" "$PROJECTDIR/wp/wp-content/themes/$SLUG/style.scss"
	echo -e "Theme description updated as '${NAME}' ... ${GREEN}done${RESET}"




	# Permission fix
	file_permission_update "$PROJECTDIR/wp/wp-content/themes/$SLUG"




	# Install NPM packages and build the style.css
	echo "NPM packages are installing and 'style.css' is being built..."
	(
		cd "$PROJECTDIR/wp/wp-content/themes/$SLUG"
		npm run build
	)
	echo -e "'style.css' has been built ... ${GREEN}done${RESET}"


fi




# Update the permissions
file_permission_update "$PROJECTDIR"




# START THE INSTALLATION
MODE=install-starter
source "$BUILDERDIR/actions/install"