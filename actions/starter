#!/bin/bash


# Check if the project is already installed
if [[ $INSTALLED == "yes" ]]; then

	echo -e "${RED}Project is already installed.${RESET}"
	exit

fi




# Get data from sample.env file
source "$BUILDERDIR/sample.env"
PLUGINS=$DEFAULT_PLUGINS




# Get local.env in project folder, if exists
if [[ -f "$PROJECTDIR/local.env" ]]; then

	source "$PROJECTDIR/local.env"

fi




# Get .env in project folder, if exists
if [[ -f "$PROJECTDIR/.env" ]]; then

	source "$PROJECTDIR/.env"

fi




# Update the slug and theme folder name
SLUG=$PROJECTNAME
ACTIVE_THEME=$PROJECTNAME




# ASK THE SITE INFO
read -ep "Wordpress Version (${WP_VERSION}): " wp_version
[[ ! -z "$wp_version" ]] && WP_VERSION=$wp_version || echo "Using '${WP_VERSION}'"


printf "Checking '${WP_VERSION}' availability ..."
while ! version_check $WP_VERSION; do
	if ! version_check "$WP_VERSION.0"; then

		echo -e " ${RED}not available${RESET}"
		echo ""


		read -ep "Write an available Wordpress Version or just type 'latest': " WP_VERSION
		printf "Checking '${WP_VERSION}' availability ..."

	else

		WP_VERSION="$WP_VERSION.0"

	fi
done
echo -e " ${GREEN}available${RESET}"




read -ep "Short Name (${PREFIX}): " prefix
[[ ! -z "$prefix" ]] && PREFIX=$prefix || echo "Using '${PREFIX}'"


read -ep "Domain Name (${DOMAIN}): " domain
[[ ! -z "$domain" ]] && DOMAIN=$domain || echo "Using '${DOMAIN}'"


# Check the local domain availability
echo "Checking '${DOMAIN}' availability..."
if grep -q "${DOMAIN}" /etc/hosts; then
	echo -e "${RED}'${DOMAIN}' Host has already been added. Please remove it before installing.${RESET}"
	exit
fi
echo -e "${GREEN}${DOMAIN}${RESET} - AVAILABLE"


read -ep "Website Name (${NAME}): " name
[[ ! -z "$name" ]] && NAME=$name || echo "Using '${NAME}'"


read -ep "Website Tagline (${DESC}): " desc
[[ ! -z "$desc" ]] && DESC=$desc || echo "Using '${DESC}'"


read -ep "Plugins that need to be installed (Just press 'enter' to install these recommended plugins: ${PLUGINS}): " plugins
[[ ! -z "$plugins" ]] && PLUGINS=$plugins || echo "Using '${PLUGINS}'"


# Ask for the admin info
read -ep "Developer Email (${DEVELOPER_EMAIL}): " developer_email
[[ ! -z "$developer_email" ]] && DEVELOPER_EMAIL=$developer_email || echo "Using '${DEVELOPER_EMAIL}'"


if [[ $DEVELOPER_EMAIL != bilaltas@me.com ]]; then


	read -ep "Developer Username (${DEVELOPER_USERNAME}): " developer_username
	[[ ! -z "$developer_username" ]] && DEVELOPER_USERNAME=$developer_username || echo "Using '${DEVELOPER_USERNAME}'"


	read -ep "Developer First Name (${DEVELOPER_NAME}): " developer_name
	[[ ! -z "$developer_name" ]] && DEVELOPER_NAME=$developer_name || echo "Using '${DEVELOPER_NAME}'"


	read -ep "Developer Last Name (${DEVELOPER_LAST_NAME}): " developer_last_name
	[[ ! -z "$developer_last_name" ]] && DEVELOPER_LAST_NAME=$developer_last_name || echo "Using '${DEVELOPER_LAST_NAME}'"


	read -ep "Developer Website URL (${DEVELOPER_URL}): " developer_url
	[[ ! -z "$developer_url" ]] && DEVELOPER_URL=$developer_url || echo "Using '${DEVELOPER_URL}'"

else


	DEVELOPER_USERNAME="BilalTas"
	DEVELOPER_NAME="Bilal"
	DEVELOPER_LAST_NAME="Tas"
	DEVELOPER_URL="https://www.bilaltas.net"

	ADMIN_EMAIL=${DEVELOPER_EMAIL}
	ADMIN_USERNAME=${DEVELOPER_USERNAME}
	ADMIN_NAME=${DEVELOPER_NAME}
	ADMIN_LAST_NAME=${DEVELOPER_LAST_NAME}
	ADMIN_URL=${DEVELOPER_URL}


fi




# Confirm the information
echo ""
echo ""
echo "== Information Entered ============"
echo ""


	echo "Local Development Domain: $DOMAIN"
	echo "WP Version: $WP_VERSION"
	echo ""

	echo "Project Name: $SLUG"
	echo "Short Name: $PREFIX"
	echo ""

	echo "Website Name: $NAME"
	echo "Website Tagline: $DESC"
	[[ ! -z "$plugins" ]] && echo "Plugins: $plugins" || echo "Plugins: $PLUGINS"
	echo ""

	echo "Developer Email: $DEVELOPER_EMAIL"
	echo "Developer Username: $DEVELOPER_USERNAME"
	echo "Developer First Name: $DEVELOPER_NAME"
	echo "Developer Last Name: $DEVELOPER_LAST_NAME"
	echo "Developer URL: $DEVELOPER_URL"


echo ""
echo "==================================="
echo ""
echo ""
read -ep "Are these correct? (type 'yes' to confirm): " confirm


# If not confirmed, close the installation
if [[ $confirm != yes ]] && [[ $confirm != y ]]; then

	echo -e "${RED}Not confirmed.${RESET}"
	exit

fi




# Create the project folder
if [[ ! -d "$PROJECTDIR" ]]; then

	sudo mkdir "$PROJECTDIR"
	echo -e "Project folder has been created ... ${GREEN}done${RESET}"

fi




# Update environment files with the new info
update_environment


# Get data from the new .env file
source "$PROJECTDIR/.env"




# Download the template
sudo rm -rf "$PROJECTDIR/wp/wp-content/themes/$SLUG"
sudo git clone https://github.com/bilaltas/wp-flexible-starter-template.git "$PROJECTDIR/wp/wp-content/themes/$SLUG"
sudo rm -rf "$PROJECTDIR/wp/wp-content/themes/$SLUG/.git"
echo -e "Starter theme clonned ... ${GREEN}done${RESET}"


# Check the theme files
if [[ ! -f "$PROJECTDIR/wp/wp-content/themes/$SLUG/functions.php" ]] || [[ ! -f "$PROJECTDIR/wp/wp-content/themes/$SLUG/header.php" ]] || [[ ! -f "$PROJECTDIR/wp/wp-content/themes/$SLUG/footer.php" ]] || [[ ! -f "$PROJECTDIR/wp/wp-content/themes/$SLUG/style.scss" ]]; then

	echo -e "${RED}Missing theme files.${RESET}"
	exit

fi




# Theme function prefix changes
sedreplace "s/sitename/${PREFIX}/g" "$PROJECTDIR/wp/wp-content/themes/$SLUG/functions.php"
sedreplace "s/sitename/${PREFIX}/g" "$PROJECTDIR/wp/wp-content/themes/$SLUG/header.php"
sedreplace "s/sitename/${PREFIX}/g" "$PROJECTDIR/wp/wp-content/themes/$SLUG/footer.php"
echo -e "Function prefixes changed as '${PREFIX}_' ... ${GREEN}done${RESET}"




# Theme info changes
sedreplace "s/Site Name/${NAME}/g" "$PROJECTDIR/wp/wp-content/themes/$SLUG/style.scss"
echo -e "Theme name updated as '${NAME}' ... ${GREEN}done${RESET}"

sedreplace "s/Site tagline/${DESC}/g" "$PROJECTDIR/wp/wp-content/themes/$SLUG/style.scss"
echo -e "Theme description updated as '${NAME}' ... ${GREEN}done${RESET}"




# Permission fix
file_permission_update "$PROJECTDIR/wp/wp-content/themes/$SLUG"




# Install NPM packages and build the style.css
echo "NPM packages are installing and 'style.css' is being built..."
(
	cd "$PROJECTDIR/wp/wp-content/themes/$SLUG"
	npm run build
)
echo -e "'style.css' has been built ... ${GREEN}done${RESET}"




# Update the permissions
file_permission_update "$PROJECTDIR"




# START THE INSTALLATION
MODE=install-starter
source "$BUILDERDIR/actions/install"