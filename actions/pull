#!/bin/bash




# Check if the folder not exists
if [[ ! -d "$PROJECTDIR" ]]; then

	echo -e "${RED}Project doesn't exist.${RESET}"
	exit

fi




# Import confirmation
if [[ $OPTION1 == --import ]] || [[ $OPTION2 == --import ]]; then



	if [[ -z $confirm ]]; then

		read -ep "Are you sure you want to replace all the changes you might have done including the DB changes? (yes | no): " confirm
		if [[ $confirm != yes ]] && [[ $confirm != y ]]; then

			echo -e "${RED}Not confirmed.${RESET}"
			exit

		fi

	fi


	# Move import files
	move_import_files


	# Import the DB again
	if [[ $INSTALLED == "yes" ]]; then

		OPTION1=--import
		source "$BUILDERDIR/actions/db"

	fi


	echo -e "Importing ... ${GREEN}done${RESET}"
	exit


fi




# Check if git exist
if [[ ! -d "$PROJECTDIR/.git" ]]; then

	echo -e "${RED}Project doesn't have any git repository.${RESET}"
	exit

fi




# Hard pull confirmation
if [[ $OPTION1 == --hard ]] || [[ $OPTION2 == --hard ]]; then


	if [[ -z $confirm ]]; then

		read -ep "Are you sure you want to get latest changes from Git? This will replace all the changes you might have done including the DB changes. (yes | no): " confirm
		if [[ $confirm != yes ]] && [[ $confirm != y ]]; then

			echo -e "${RED}Not confirmed.${RESET}"
			exit

		fi

	fi


	# Hard reset
	echo "Hard reset files..."
	sudo git fetch
	sudo git reset --hard


	if [[ $INSTALLED != "yes" ]]; then

		sudo git clean -dfx
		echo -e "Hard reset files ... ${GREEN}done${RESET}"

	else

		sudo git clean -df
		echo -e "Hard reset files ... ${GREEN}done${RESET}"

	fi


	# # Permission Fix
	# git_permission_update "$PROJECTDIR/.git"
	# file_permission_update "$PROJECTDIR/wp/wp-content"


fi




# Detect remote
if sudo git remote get-url --all origin &> /dev/null; then


	# Detect DB changes
	DB_FILE="$PROJECTDIR/wp/wp-content/mysql.sql"
	DB_SUM1=$(md5 -r "$DB_FILE")



	# Resetting the output files first, not to get false conflicts
	if [[ -f "$PROJECTDIR/wp/wp-content/themes/$ACTIVE_THEME/style.css" ]] && [[ -f "$PROJECTDIR/wp/wp-content/themes/$ACTIVE_THEME/style.css.map" ]] && [[ -f "$PROJECTDIR/wp/wp-content/themes/$ACTIVE_THEME/gulpfile.js" ]] && [[ -d "$PROJECTDIR/wp/wp-content/themes/$ACTIVE_THEME/node_modules/gulp" ]]; then

		git checkout "$PROJECTDIR/wp/wp-content/themes/$ACTIVE_THEME/style.css" "$PROJECTDIR/wp/wp-content/themes/$ACTIVE_THEME/style.css.map"

	fi



	# Pulling latest changes from git
	echo "Checking the latest remote changes..."
	PULL=$(sudo git --work-tree="$PROJECTDIR" pull)
	if [[ $PULL == "Already up to date." ]]; then


		echo -e "Git pull ... ${BLUE}already up to date${RESET}"


		if [[ $OPTION1 == --hard ]] || [[ $OPTION2 == --hard ]]; then

			# Import the DB
			OPTION1=--import
			source "$BUILDERDIR/actions/db"

		fi


	elif [[ $PULL ]]; then


		# echo -e "Git pull ... ${GREEN}done${RESET}"


		# DETECT DB CHANGES
		if [[ $OPTION1 == --hard ]] || [[ $OPTION2 == --hard ]]; then


			# Import the DB
			OPTION1=--import
			source "$BUILDERDIR/actions/db"


		else # Not --hard


			file_permission_update "$DB_FILE"
			DB_SUM2=$(md5 -r "$DB_FILE")
			if [[ $DB_SUM1 != $DB_SUM2 ]]; then


				echo -e "${BLUE}DB changed${RESET}"


				# If installed
				if [[ $INSTALLED == "yes" ]] && [[ $CONTAINEREXISTS == "yes" ]]; then


					# Confirm before changing DB
					read -ep "DB has been changed by the last commit. Would you like to continue replacing your local site data with the new one? (yes | no): " confirm
					if [[ $confirm == no ]] || [[  $confirm == n ]]; then

						echo -e "${BLUE}Pulling complete without replacing the DB${RESET}"
						exit

					fi


					# Import the DB
					OPTION1=--import
					source "$BUILDERDIR/actions/db"


				else

					echo -e "${GREEN}Server needs to be installed to apply DB changes.${RESET}"

				fi


			else

				echo -e "${BLUE}DB is identical.${RESET}"

			fi


		fi


		# Permission fix needed
		if [[ $PERMISSIONFIX != "no" ]]; then

			git_permission_update "$PROJECTDIR/.git"
			file_permission_update "$PROJECTDIR/wp/wp-content"

		fi


	else

		echo -e "Git pull ... ${RED}not done${RESET}"
		exit

	fi



	# Rebuild the CSS file
	if [[ -d "$PROJECTDIR/wp/wp-content/themes/$ACTIVE_THEME/node_modules/gulp" ]] && [[ -f "$PROJECTDIR/wp/wp-content/themes/$ACTIVE_THEME/gulpfile.js" ]]; then

		# RUN THE GULP
		echo "Style file is rebuilding..."
		(
			cd "$PROJECTDIR/wp/wp-content/themes/$ACTIVE_THEME"
			npm run build
		)

	fi


else


	echo -e "${BLUE}Pull skipped. No remote added.${RESET}"


	# DB import if no remote, when hard resetting
	if [[ $OPTION1 == --hard ]] || [[ $OPTION2 == --hard ]]; then

		OPTION1=--import
		source "$BUILDERDIR/actions/db"

	fi


fi