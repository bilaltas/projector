#!/bin/bash


# Check if the folder not exists
if [[ ! -d "$PROJECTDIR" ]]; then

	echo -e "${RED}Project doesn't exist.${RESET}"
	exit

fi


# Check if the project is already installed
if [[ $INSTALLED == "yes" ]]; then

	echo -e "${RED}Project is already installed.${RESET}"
	exit

fi


# Pre-confirm
if [[ $OPTION1 == -y ]] || [[ $OPTION2 == -y ]]; then

	confirm=yes

fi




# Confirm the information
echo ""
echo ""
echo "== Site Info ============"
echo ""
echo "Local Development Domain: $DOMAIN"
echo "WP Version: $WP_VERSION"
echo ""
echo "Project Name: $SLUG"
echo "Short Name: $PREFIX"
echo ""

if [[ $MODE == install-starter ]]; then

	echo "Website Name: $NAME"
	echo "Website Tagline: $DESC"
	[[ ! -z "$plugins" ]] && echo "Plugins: $plugins" || echo "Plugins: $PLUGINS"
	echo ""

	if [[ $DEVELOPER_EMAIL != webdesign@twelve12.com ]]; then
		echo "Developer Email: $DEVELOPER_EMAIL"
		echo "Developer Username: $DEVELOPER_USERNAME"
		echo "Developer First Name: $DEVELOPER_NAME"
		echo "Developer Last Name: $DEVELOPER_LAST_NAME"
		echo "Developer URL: $DEVELOPER_URL"
		echo ""
	else
		echo "Developer Email: $DEVELOPER_EMAIL"
		echo ""
	fi

fi

echo "==================================="
echo ""
echo ""

if [[ -z $confirm ]]; then

	read -ep "Are these correct? (type 'yes' to confirm): " confirm

fi


# If not confirmed, close the installation
if [[ $confirm != yes ]] && [[ $confirm != y ]]; then

	echo -e "${RED}Not confirmed.${RESET}"
	exit

fi




echo -e "${GREEN}Confirmed.${RESET}"




# Move the 'wp-content' folder TEMPORARILY
if [[ $MODE != install-starter ]]; then

	make_temporary

fi




# Put the new gitignore
sudo cp "$BUILDERDIR/sample.gitignore" "$PROJECTDIR/.gitignore"




# Create and Update environment files
update_environment




# Get data from the new .env file
source "$PROJECTDIR/.env"




# Update the permissions
file_permission_update "$PROJECTDIR"




# Check if the services already exists even though site is not installed
if [ ! -z `docker_compose ps -q wpcli` ] || [ ! -z `docker_compose ps -q db` ]; then

	echo -e "${RED}Project services are already exist. Removing...${RESET}"
	docker_compose down

fi




## INSTALLATION:

# CHECK THE LOCAL DOMAIN AVAILABILITY
printf "Checking '${DOMAIN}' availability ..."
if grep -q "${DOMAIN}" /etc/hosts; then
	echo -e " ${RED}'${DOMAIN}' Host has already been added. Please remove it before installing.${RESET}"
	exit
fi
echo -e " ${GREEN}available${RESET}"




# CHECK IP AND CREATE HOST
COUNTER=2
while [[ $COUNTER -lt 120 ]]; do

	IP="127.0.0.${COUNTER}"


	printf "Checking '${IP}' availability ..."
	if grep -q "${IP}" /etc/hosts; then
		echo -e " ${BLUE}not available${RESET}"
	else

		if curl --max-time 3 --output /dev/null --silent --head --fail "${IP}"; then
			echo -e " ${RED}not available${RESET}"
		else
			echo -e " ${GREEN}available${RESET}"
			break
		fi

	fi


	let COUNTER=COUNTER+1

done

# Update the environment file (.env) with the available IP
sedreplace "s/IP=127.0.0.1/IP=${IP}/g" "$PROJECTDIR/.env";
echo -e "Local IP(${IP}) added into the .env file ... ${GREEN}done${RESET}"


# Open that IP slot
sudo ifconfig lo0 alias $IP up
echo -e "Local IP(${IP}) is now available to build server ... ${GREEN}done${RESET}"




# BUILD THE SERVER
echo "Server is building..."
docker_compose up -d --build --force-recreate --remove-orphans wpcli db




# Check if services are running
if [[ -z `docker_compose ps -q wpcli` ]] || [[ -z `docker ps -q --no-trunc | grep $(docker_compose ps -q wpcli)` ]] || [[ -z `docker_compose ps -q db` ]] || [[ -z `docker ps -q --no-trunc | grep $(docker_compose ps -q db)` ]]; then

	revert_installation

fi # If not running




# Install WP-CLI
source "$BUILDERDIR/actions/install-wpcli"




# Check if WPCLI installed
if docker_compose exec wpcli [ ! -f "/usr/local/bin/wp" ]; then

	revert_installation

fi




# Check files to be ready
printf "Files are being ready ..."
while [[ ! -f "$PROJECTDIR/wp/wp-config.php" ]]; do
	printf "."
	sleep 3
done
echo -e " ${GREEN}done${RESET}"




INSTALLED="yes"
CONTAINEREXISTS="yes"
CONTAINERRUNNING="yes"




# Add the host to the /etc/hosts file
sudo bash "$BUILDERDIR/config/etc-hosts.sh" -add $DOMAIN $IP
#sudo killall -HUP mDNSResponder




# Update the temporary files
if [[ $MODE != install-starter ]]; then

	make_permanent

fi




# Do the WP works if starter
if [[ $MODE == install-starter ]]; then

	source "$BUILDERDIR/config/wp.sh"

fi




# Ask the registered URL and do the replacements
if [[ $MODE != install-starter ]]; then

	db_url_update

fi




# Save the initial DB backup
if [[ $MODE == install-starter ]]; then

	db_backup

fi




# Git initialization
if [[ ! -d "$PROJECTDIR/.git" ]]; then


	# Initiate git
	(

		# Open the site directory
		cd "$PROJECTDIR"
		echo -e "Open the site directory ... ${GREEN}done${RESET}"


		# Initiate Git
		git init
		echo -e "Initiate Git ... ${GREEN}done${RESET}"


		# Stage all the changes
		git add -A .
		echo -e "Stage all the changes ... ${GREEN}done${RESET}"


		# Commit the changes
		git commit -m "Initial commit"
		echo -e "Commit the changes ... ${GREEN}done${RESET}"

	)


fi




# Fix the site git permissions
if [[ -d "$PROJECTDIR/.git" ]]; then

	git_permission_update "$PROJECTDIR/.git"

fi




# PRINT THE SITE INFO
echo -e "${GREEN}Project Installed${RESET}"
echo ""
echo ""
echo "== Site Info ===================="
echo ""
echo "Site URL: http://${DOMAIN}"
echo "Admin Page: http://${DOMAIN}/wp-admin"

if [[ $MODE == install-starter ]]; then

	echo "Username: ${ADMIN_USERNAME}"
	echo "${ADMIN_ONLY_PASSWORD}"

fi

echo "IP: ${IP}"
echo ""
echo "================================="
echo ""
echo ""


echo -e "Installing '$SLUG' project ... ${GREEN}done${RESET}"
