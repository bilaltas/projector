#!/bin/bash


# Get the functions
source "$BUILDERDIR/global.sh"




# Chech if local.env exist at the beginning
LOCALENVEXISTSATBEGINNING="no"
if [[ -f "$BASEDIR/local.env" ]]; then

	LOCALENVEXISTSATBEGINNING="yes"

fi




# Check if current folder is a project folder (project-name/)
if [[ $LOCALENVEXISTSATBEGINNING == "yes" ]] || [[ -f "$BASEDIR/.env" ]] || [[ -d "$BASEDIR/.git" ]]; then


	# Extract the project name from BASEDIR
	SLUG="${BASEDIR%"${BASEDIR##*[!/]}"}"
	SLUG="${SLUG##*/}"
	#echo "Project name: $SLUG"


	# Project info
	PROJECTNAME=$SLUG
	PROJECTDIR="$BASEDIR"


	# Options
	OPTION1=$2
	OPTION2=$3


fi # If current folder is a project folder




# Ask for the action, if not specified
ACTION=$1
if [[ -z $ACTION ]]; then


	echo -e ""
	echo -e "${GREEN}GENERAL USAGE:${RESET} projector <action> <project-name[only if in 'Projects' folder]> <option[optional]>"
	echo -e ""
	echo -e "== PROJECTOR v0.3 - Allowed Actions ===================="
	echo -e "  "
	echo -e "  ${BLUE}starter${RESET}          Create a new project from scratch"
	echo -e "     Options:"
	echo -e "       --existing         In development: Start with an existing site"
	echo -e "  "
	echo -e "  ${BLUE}clone${RESET}            Clone a project from Git"
	echo -e "     Options:"
	echo -e "       <git_url>          Clone from a git URL (https://example.com/username/reponame.git)"
	echo -e "       <projectname>      Clone from a Twelve12 project (project-name)"
	echo -e "  "
	echo -e "  ${BLUE}install${RESET}          Install a project that already clonned or created"
	echo -e "  "
	echo -e "  ${BLUE}open${RESET}             Open the development URL on default browser"
	echo -e "  "
	echo -e "  ${BLUE}uninstall${RESET}        Uninstall a project that already installed"
	echo -e "     Options:"
	echo -e "       --remove           Removes the project folder after uninstallation"
	echo -e "       --nobackup         Does not export the database before uninstallation"
	echo -e "  "
	echo -e "  ${BLUE}pull${RESET}             Pull the latest changes from Git"
	echo -e "     Options:"
	echo -e "       --commit           In development: Gets all the changes from a commit"
	echo -e "       --hard             Gets all the latest changes from Git"
	echo -e "       --import           Import site and DB files externally"
	echo -e "  "
	echo -e "  ${BLUE}push${RESET}             Push the latest local changes to Git"
	echo -e "     Options:"
	echo -e "       --files            Only push the file changes"
	echo -e "       --db               Only push the DB changes"
	echo -e "       --all              Push all the file and DB changes"
	echo -e "  "
	echo -e "  ${BLUE}start${RESET}            Pull the latest changes from git and run the Node JS start script of the active theme"
	echo -e "     Options:"
	echo -e "       --hard             Restore all the latest changes from Git and start regularly"
	echo -e "       --import           Import site and DB files externally and start regularly"
	echo -e "  "
	echo -e "  ${BLUE}run${RESET}              Restart the containers to run the project"
	echo -e "  "
	echo -e "  ${BLUE}stop${RESET}             Stop the servers of an installed project"
	echo -e "  "
	echo -e "  "
	echo -e " TOOLS:"
	echo -e "  "
	echo -e "  ${BLUE}phpmyadmin${RESET}       Start the phpMyAdmin service and open in a browser"
	echo -e "     Options:"
	echo -e "       --stop           	 Stop the phpMyAdmin service"
	echo -e "  "
	echo -e "  ${BLUE}db${RESET}               Run the server and Node JS of an installed project"
	echo -e "     Options:"
	echo -e "       --export           Export the DB into 'database/dump/' folder"
	echo -e "       --import           Import the DB file in 'database/dump/wordpress_data.sql'"
	echo -e "  "
	echo -e "  ${BLUE}docker-compose${RESET}   Run docker-compose commands on the project"
	echo -e "  ${BLUE}wp${RESET}               Run wpcli commands on the project"
	echo -e "  "
	echo -e "  ${BLUE}permission-fix${RESET}   Permission fix on .git, wp-content and node_modules folders. If you get permission errors, do this"
	echo -e "     Options:"
	echo -e "       --node             Permission fix on node_modules folder in the active theme folder"
	echo -e "       --git              Permission fix on .git folder"
	echo -e "       --files            Permission fix on wp-content folder"
	echo -e "       --server           Permission fix on Docker Container"
	echo -e "       --all              Permission fix on node_modules and .git folders, site folder"
	echo -e "       --[option] [dir]   Permission fix on the directory entered with the option"
	echo -e "  "
	echo -e "  ${BLUE}ssh-fix${RESET}          If you get permission errors while connecting to test server, do this"
	echo -e "  "
	echo -e "  ${BLUE}export${RESET}           Exports the theme folder zip and DB for a live site"
	echo -e "     Options:"
	echo -e "       --importable       Creates importable export"
	echo -e "  "
	echo -e "  "
	echo -e "================================="
	echo -e ""

	exit;
	read -ep "Write the action type: " ACTION
	if [[ -z $ACTION ]]; then

		echo -e "${RED}No action entered.${RESET}"
		exit

	fi


	# Separate the action and option here!!!


fi




# If unknown answer
if [[ ! -f "$BUILDERDIR/actions/$ACTION" ]]; then

	echo -e "${RED}Wrong action.${RESET}"
	exit

fi




# If not ssh-fix action
if [[ $ACTION != ssh-fix ]]; then


	# If it's under current folder (Projects/project-name)
	if [[ -z $SLUG ]] && [[ -z "$PROJECTDIR" ]]; then


		# Get project name from args
		if [[ ! -z $2 ]]; then

			SLUG=$2


			# Options
			OPTION1=$3
			OPTION2=$4


		else


			# List the projects available (Not colored: ls -d *)
			if [[ $ACTION != clone ]] && [[ $ACTION != starter ]] && [[ $ACTION != ssh-fix ]]; then

				for i in $(ls -d */); do echo -e ${BLUE}${i%%/}${RESET}; done

			fi

			# Ask for the project name
			while [[ -z $SLUG ]]; do
				read -ep "Project name (site-name): " SLUG
			done


		fi


		# Remove slash at the end
		SLUG=${SLUG%/}


		# URL check for git repo
		regex='(https?|ftp|file)://[-A-Za-z0-9\+&@#/%?=~_|!:,.;]*[-A-Za-z0-9\+&@#/%=~_|]'
		if [[ $SLUG =~ $regex ]]; then

			GIT_REPO=$SLUG

			# Get repo name
			basename=$(basename $SLUG)
			SLUG=${basename%.*}

		else

			GIT_REPO="https://github.com/twelve12/${SLUG}.git"

		fi


		# Project info
		PROJECTNAME=$SLUG
		PROJECTDIR="$BASEDIR/$SLUG"


	fi




	# CHECK IF DOCKER INSTALLED
	if [[ ! -d "/Applications/Docker.app" ]]; then

		echo -e "${RED}Docker is not installed to your computer. Please install and try again.${RESET}"
		exit

	fi




	# CHECK DOCKER WHETHER OR NOT RUNNING
	rep=$(docker ps -q &>/dev/null)
	status=$?
	if [[ "$status" != "0" ]]; then

		printf 'Docker is opening ...'
		open /Applications/Docker.app
		echo -e " ${GREEN}done${RESET}"


		printf 'Docker is starting ...'
		while [[ "$status" != "0" ]]; do

			sleep 3
			rep=$(docker ps -q &>/dev/null)
			status=$?

		done
		echo -e " ${GREEN}done${RESET}"

	fi




	# DEFAULT PROJECT STATUSES
	INSTALLED="no"
	CONTAINEREXISTS="no"
	CONTAINERRUNNING="no"




	# Installation Check
	if [[ -d "$PROJECTDIR" ]]; then


		# Get environmental data
		get_env_data


		printf "Project status ..."
		if [[ $IP != "127.0.0.1" ]]; then


			INSTALLED="yes"
			echo -e " ${GREEN}installed${RESET}"


			# Check if the local IP available
			printf "IP($IP) status ..."
			if ! curl --max-time 3 --output /dev/null --silent --head --fail "$IP"; then

				sudo ifconfig lo0 alias $IP up
				echo -e " ${BLUE}activated${RESET}"

			else

				echo -e " ${GREEN}active${RESET}"

			fi
			#exit


		else


			echo -e " ${BLUE}not installed${RESET}"


			# Create and Update environment files
			update_environment


			# # If not installed, containers should be removed
			# if [[ ! -z `docker_compose ps -q wpcli` ]] || [[ ! -z `docker_compose ps -q db` ]]; then

			# 	echo -e "${BLUE}Cleaning up...${RESET}"
			# 	docker_compose down -v --rmi local --remove-orphans
			# 	echo -e "Cleaning up ... ${GREEN}done${RESET}"

			# fi


		fi # If already installed



		# Check if services are running
		printf "Containers status ..."
		if [[ ! -z `docker_compose ps -q wpcli` ]] && [[ ! -z `docker_compose ps -q db` ]]; then


			CONTAINEREXISTS="yes"
			echo -e " ${GREEN}exist${RESET}"


			# Check if services are running
			printf "Containers running status ..."
			if [[ ! -z `docker ps -q --no-trunc | grep $(docker_compose ps -q wpcli)` ]] && [[ ! -z `docker ps -q --no-trunc | grep $(docker_compose ps -q db)` ]]; then


				CONTAINERRUNNING="yes"
				echo -e " ${GREEN}running${RESET}"


			else

				echo -e " ${BLUE}not running${RESET}"

			fi # If not running


		else

			echo -e " ${BLUE}not exists${RESET}"

		fi # If not exist



		if [[ $INSTALLED == "no" ]]; then


			# Remove the .env file again if not installed
			if [[ -f "$PROJECTDIR/.env" ]]; then

				sudo rm -rf "$PROJECTDIR/.env"
				echo -e ".env file removed ... ${GREEN}done${RESET}"

			fi


			# Remove the local.env file again if not installed
			if [[ $LOCALENVEXISTSATBEGINNING == "no" ]] && [[ -f "$PROJECTDIR/local.env" ]]; then

				sudo rm -rf "$PROJECTDIR/local.env"
				echo -e "local.env file removed ... ${GREEN}done${RESET}"

			fi


		fi


	fi # If project folder exists and not ssh-fix


fi # If not ssh-fix action




##Â DO THE ACTION:
if [[ -f "$BUILDERDIR/actions/$ACTION" ]]; then

	source "$BUILDERDIR/actions/$ACTION"

else

	echo -e "${RED}Action couldn't be found.${RESET}"
	exit

fi